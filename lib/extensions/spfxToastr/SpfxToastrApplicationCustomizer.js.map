{"version":3,"sources":["extensions/spfxToastr/SpfxToastrApplicationCustomizer.ts"],"names":[],"mappings":"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","file":"extensions/spfxToastr/SpfxToastrApplicationCustomizer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseApplicationCustomizer,\n  PlaceholderContent,\n  PlaceholderName\n} from '@microsoft/sp-application-base';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport * as strings from 'SpfxToastrApplicationCustomizerStrings';\n//Needed to reference external CSS files\nimport { SPComponentLoader } from '@microsoft/sp-loader';\n\nimport { MISMain } from './MISMain';\nimport * as $ from 'jquery';\n\n// import * as toastr from 'toastr';\n// import styles from './SpfxToastr.module.scss';\n//import { IToast, ToastService } from '../../services/toastService'; //loaded from the toastService barrel - temporarily disabled due to issue with WebPack\nimport { IToast } from '../../services/toastService/IToast';\nimport { ToastService } from '../../services/toastService/ToastService';\n\nconst LOG_SOURCE: string = 'SpfxToastrApplicationCustomizer';\n\nrequire('sp-init');\nrequire('microsoft-ajax');\nrequire('sp-runtime');\nrequire('sharepoint');\n\nSPComponentLoader.loadCss('https://samavangarde.sharepoint.com/sites/devjeff/Style%20Library/MIS.GlobalNavigation/css/MIS.GlobalNavigationModern.css')\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface ISpfxToastrApplicationCustomizerProperties {\n  Top: string;\n  Bottom: string;\n}\n\n//SPComponentLoader.loadCss('https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css');\n\n/** A Custom Action which can be run during execution of a Client Side Application */\nexport default class SpfxToastrApplicationCustomizer\n  extends BaseApplicationCustomizer<ISpfxToastrApplicationCustomizerProperties> {\n\n  private toastsPromise: Promise<IToast[]>;\n\n  private _headerPlaceholder: PlaceholderContent;\n  private _topPlaceholder: PlaceholderContent | undefined;\n  private _bottomPlaceholder: PlaceholderContent | undefined;\n\n  @override\n  public onInit(): Promise<void> {\n    //Log.info(LOG_SOURCE, `Initialized v1.0.4 ${strings.Title}`);\n\n    Log.info(LOG_SOURCE, `After changedEvent`);\n\n    // Call render method for generating the HTML elements.\n    //this._renderPlaceHolders();\n\n\n    // Added to handle possible changes on the existence of placeholders.\n    this.context.placeholderProvider.changedEvent.add(this, this._renderPlaceHolders);\n\n\n    Log.info(LOG_SOURCE, `After _renderPlaceHolders`);\n    //Dialog.alert(`hello from SPFX`);\n    return Promise.resolve<void>();\n  }\n\n  private buildMegaMenu(): void {\n\n    //$('.ms-bgColor-themeDark').text(\"tete\");\n\n    $(document).ready(function () {\n      //alert(\"test\");\n    });\n\n    let instanceMis: MISMain = new MISMain(this.context);\n\n    // const context: SP.ClientContext = new SP.ClientContext(this.context.pageContext.web.absoluteUrl);\n    // const web: SP.Web = context.get_web();\n    // context.load(web);\n    // context.executeQueryAsync(function name(sender, args) {\n    //   //this.webpartTitle = web.get_title();\n    //   //console.log(web.get_description());\n    //   // let siteContent: string = `<div>\n    //   //                            <h2>Title: ${web.get_title()}</h2>\n    //   //                            <span>Description: ${web.get_description()}<span>\n    //   //                          </div>`;\n    //   //htmlContext.domElement.querySelector(\"#siteContent\").innerHTML =siteContent;\n    // },\n    //   function (sender, args) {\n    //     console.log(args.get_message());\n    //   });\n\n  }\n  private _renderPlaceHolders(): void {\n\n    console.log('HelloWorldApplicationCustomizer._renderPlaceHolders()');\n    console.log('Available placeholders: ',\n      this.context.placeholderProvider.placeholderNames.map(name => PlaceholderName[name]).join(', '));\n\n    // Handling the top placeholder\n    if (!this._topPlaceholder) {\n      this._topPlaceholder =\n        this.context.placeholderProvider.tryCreateContent(\n          PlaceholderName.Top,\n          { onDispose: this._onDispose });\n\n      // The extension should not assume that the expected placeholder is available.\n      if (!this._topPlaceholder) {\n        console.error('The expected placeholder (Top) was not found.');\n        return;\n      }\n\n      if (this.properties) {\n        let topString: string = this.properties.Top;\n        if (!topString) {\n          topString = '(Top property was not defined.)';\n        }\n\n        if (this._topPlaceholder.domElement) {\n          this._topPlaceholder.domElement.innerHTML = `<div id=\"MEGAMENU\" class=\"\"></div>`;\n\n          // this._topPlaceholder.domElement.innerHTML = `\n          // <div id=\"MEGAMENU\" class=\"\">\n          //   <div class=\"ms-bgColor-themeDark ms-fontColor-white \">\n          //     This is my place holder\n\n          //     // <i class=\"ms-Icon ms-Icon--Info\" aria-hidden=\"true\"></i>\n          //   </div>\n          // </div>`;\n        }\n      }\n    }\n\n    this._loadSPJSOMScripts().then(() => {\n\n      this.buildMegaMenu();\n    })\n  }\n\n  private _onDispose(): void {\n    console.log('[HelloWorldApplicationCustomizer._onDispose] Disposed custom top and bottom placeholders.');\n  }\n\n  public getSiteCollectionUrl(): string {\n    let baseUrl = window.location.protocol + \"//\" + window.location.host;\n    const pathname = window.location.pathname;\n    const siteCollectionDetector = \"/sites/\";\n    if (pathname.indexOf(siteCollectionDetector) >= 0) {\n      baseUrl += pathname.substring(0, pathname.indexOf(\"/\", siteCollectionDetector.length));\n    }\n    return baseUrl;\n  }\n\n  private _loadSPJSOMScripts(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const siteColUrl = this.getSiteCollectionUrl();\n      try {\n        SPComponentLoader.loadScript(siteColUrl + '/_layouts/15/init.js', {\n          globalExportsName: '$_global_init'\n        })\n          .then((): Promise<void> => {\n            return SPComponentLoader.loadScript(siteColUrl + '/_layouts/15/MicrosoftAjax.js', {\n              globalExportsName: 'Sys'\n            });\n          })\n          .then((): Promise<void> => {\n            return SPComponentLoader.loadScript(siteColUrl + '/_layouts/15/SP.Runtime.js', {\n              globalExportsName: 'SP'\n            });\n          })\n          .then((): Promise<void> => {\n            return SPComponentLoader.loadScript(siteColUrl + '/_layouts/15/SP.js', {\n              globalExportsName: 'SP'\n            });\n          })\n          .then((): Promise<void> => {\n            return SPComponentLoader.loadScript(siteColUrl + '/_layouts/15/SP.taxonomy.js', {\n              globalExportsName: 'SP'\n            });\n          })\n          .then((): void => {\n            //this.setState({ loadingScripts: false });\n            resolve();\n          })\n          .catch((reason: any) => {\n            resolve();\n            //this.setState({ loadingScripts: false, errors: [...this.state.errors, reason] });\n          });\n      } catch (error) {\n        //this.setState({ loadingScripts: false, errors: [...this.state.errors, error] });\n      }\n    });\n  }\n}\n\n"],"sourceRoot":"..\\..\\..\\src"}